require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InspectionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Inspection. As you add validations to Inspection, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(
      :inspection, 
      ).tap do |x| 
        x[:unit_id] = x[:unit].id
        x[:template_id] = x[:template].id
        x[:user_id] = controller.current_user.id
      end
  }

  let(:unit) {
    FactoryGirl.create(:unit, building:
      FactoryGirl.create(:building, user_id: controller.current_user.id)
    )
  }
  
  let(:template) {
    FactoryGirl.create(:inspection_template_with_items, items_count: 5)
  }
  
  let(:invalid_attributes) {
    valid_attributes.tap{|x| x[:unit_id] = nil }
  }

  describe "when logged in as a regular user" do

    before(:each) do
      sign_in FactoryGirl.create(:user)
    end

    describe "GET #index" do
      it "assigns all inspections as @inspections" do
        inspection = Inspection.create! valid_attributes
        get :index, {}
        expect(assigns(:inspections)).to eq([inspection])
      end
    end

    describe "GET #show" do
      it "assigns the requested inspection as @inspection" do
        inspection = Inspection.create! valid_attributes
        get :show, {:id => inspection.to_param}
        expect(assigns(:inspection)).to eq(inspection)
      end
    end

    describe "GET #new" do
      it "assigns a new inspection as @inspection" do
        get :new, {}
        expect(assigns(:inspection)).to be_a_new(Inspection)
      end
    end

    describe "GET #edit" do
      it "assigns the requested inspection as @inspection" do
        inspection = Inspection.create! valid_attributes
        get :edit, {:id => inspection.to_param}
        expect(assigns(:inspection)).to eq(inspection)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Inspection" do
          expect {
            post :create, {:inspection => valid_attributes}
          }.to change(Inspection, :count).by(1)
        end

        it "assigns a newly created inspection as @inspection" do
          post :create, {:inspection => valid_attributes}
          expect(assigns(:inspection)).to be_a(Inspection)
          expect(assigns(:inspection)).to be_persisted
        end

        it "redirects to the created inspection" do
          post :create, {:inspection => valid_attributes}
          expect(response).to redirect_to(Inspection.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved inspection as @inspection" do
          post :create, {:inspection => invalid_attributes}
          expect(assigns(:inspection)).to be_a_new(Inspection)
        end

        it "re-renders the 'new' template" do
          post :create, {:inspection => invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          { description: "new description" }
        }

        it "updates the requested inspection" do
          inspection = Inspection.create! valid_attributes
          put :update, {:id => inspection.to_param, :inspection => new_attributes}
          inspection.reload
          expect(inspection.description).to eq("new description")
        end

        it "assigns the requested inspection as @inspection" do
          inspection = Inspection.create! valid_attributes
          put :update, {:id => inspection.to_param, :inspection => valid_attributes}
          expect(assigns(:inspection)).to eq(inspection)
        end

        it "redirects to the inspection" do
          inspection = Inspection.create! valid_attributes
          put :update, {:id => inspection.to_param, :inspection => valid_attributes}
          expect(response).to redirect_to(inspection)
        end
      end

      context "with invalid params" do
        it "assigns the inspection as @inspection" do
          inspection = Inspection.create! valid_attributes
          put :update, {:id => inspection.to_param, :inspection => invalid_attributes}
          expect(assigns(:inspection)).to eq(inspection)
        end

        it "re-renders the 'edit' template" do
          inspection = Inspection.create! valid_attributes
          put :update, {:id => inspection.to_param, :inspection => invalid_attributes}
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested inspection" do
        inspection = Inspection.create! valid_attributes
        expect {
          delete :destroy, {:id => inspection.to_param}
        }.to change(Inspection, :count).by(-1)
      end

      it "redirects to the inspections list" do
        inspection = Inspection.create! valid_attributes
        delete :destroy, {:id => inspection.to_param}
        expect(response).to redirect_to(inspections_url)
      end
    end
  end
end
